name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: docker.io

jobs:
  # =============================================================================
  # Testing Phase
  # =============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt
        
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=services --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: python

  # =============================================================================
  # Docker Build and Push
  # =============================================================================
  docker-build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: "${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}"
    
    strategy:
      matrix:
        service: 
          - data_collection
          - data_processing  
          - model_training
          - retrieval
          - inference
          - frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: "${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}"
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME || 'ecommerce' }}/sentiment-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # Hugging Face Spaces Deployment
  # =============================================================================
  deploy-hf-spaces:
    name: Deploy to Hugging Face Spaces
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: "${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && secrets.HF_TOKEN != '' }}"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install deployment dependencies
      run: |
        pip install huggingface_hub gradio transformers torch numpy pandas faiss-cpu
        
    - name: Prepare HF Space files
      run: |
        # Copy and rename files for HF Spaces
        cp hf_space_app.py app.py
        cp hf_space_requirements.txt requirements.txt
        cp hf_space_README.md README.md
        
        # Create necessary directories
        mkdir -p data/processed
        
        # Copy model files if they exist
        if [ -d "models/checkpoints/final_model" ]; then
          cp -r models/checkpoints/final_model/* ./
        fi
        
        # Copy data files if they exist
        if [ -f "data/processed/reviews.csv" ]; then
          cp data/processed/reviews.csv data/processed/
        fi
        if [ -f "data/processed/embeddings.npy" ]; then
          cp data/processed/embeddings.npy data/processed/
        fi
        
    - name: Test HF Space app locally
      run: |
        timeout 30s python app.py || true
        
    - name: Deploy to Hugging Face Spaces
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_USERNAME: ${{ secrets.HF_USERNAME }}
      run: |
        python -c "
        import os
        from huggingface_hub import HfApi, create_repo
        
        # Initialize API
        api = HfApi()
        token = os.environ.get('HF_TOKEN')
        username = os.environ.get('HF_USERNAME', 'your-username')
        repo_id = f'{username}/ecommerce-sentiment-analysis'
        
        try:
            # Create repository if it doesn't exist
            create_repo(
                repo_id=repo_id,
                token=token,
                repo_type='space',
                space_sdk='gradio',
                exist_ok=True
            )
            print(f'Repository {repo_id} ready')
            
            # Upload files
            files_to_upload = [
                'app.py',
                'requirements.txt', 
                'README.md'
            ]
            
            for file in files_to_upload:
                if os.path.exists(file):
                    api.upload_file(
                        path_or_fileobj=file,
                        path_in_repo=file,
                        repo_id=repo_id,
                        repo_type='space',
                        token=token
                    )
                    print(f'Uploaded {file}')
            
            # Upload data directory if exists
            if os.path.exists('data'):
                api.upload_folder(
                    folder_path='data',
                    path_in_repo='data',
                    repo_id=repo_id,
                    repo_type='space',
                    token=token,
                    ignore_patterns=['*.git*', '*.DS_Store*']
                )
                print('Uploaded data directory')
                
            print(f'Successfully deployed to https://huggingface.co/spaces/{repo_id}')
            
        except Exception as e:
            print(f'Deployment failed: {str(e)}')
            exit(1)
        "

  # =============================================================================
  # Integration Tests
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: "${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}"
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce_sentiment
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r tests/requirements.txt
        
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        sleep 30  # Wait for services to be ready
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ecommerce_sentiment
        RETRIEVAL_SERVICE_URL: http://localhost:8004
        INFERENCE_SERVICE_URL: http://localhost:8005
      run: |
        python -m pytest tests/test_integration.py -v
        
    - name: Cleanup
      if: "${{ always() }}"
      run: |
        docker-compose down -v

  # =============================================================================
  # Deployment Notification
  # =============================================================================
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-hf-spaces, integration-tests]
    if: "${{ always() && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) }}"
    
    steps:
    - name: Deployment Success Notification
      if: "${{ needs.deploy-hf-spaces.result == 'success' }}"
      run: |
        echo "Deployment successful!"
        echo "HF Spaces: https://huggingface.co/spaces/${{ secrets.HF_USERNAME || 'your-username' }}/ecommerce-sentiment-analysis"
        echo "Docker Images: Available on Docker Hub"
        
    - name: Deployment Failure Notification
      if: "${{ needs.deploy-hf-spaces.result == 'failure' || needs.integration-tests.result == 'failure' }}"
      run: |
        echo "Deployment failed!"
        echo "Please check the logs for more information."
        exit 1