name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: docker.io

jobs:
  # =============================================================================
  # Testing Phase
  # =============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || true
        pip install -r tests/requirements.txt || true

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run unit tests
      run: |
        pip install pytest pytest-cov
        python -m pytest tests/ -v --cov=services --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: python

  # =============================================================================
  # Docker Build and Push
  # =============================================================================
  docker-build:
    name: üê≥ Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}

    strategy:
      matrix:
        service:
          - data_collection
          - data_processing
          - model_training
          - retrieval
          - inference
          - frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        if [ -n "$DOCKER_USERNAME" ] && [ -n "$DOCKER_PASSWORD" ]; then
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        else
          echo "No Docker credentials provided ‚Äî skipping login."
        fi

    - name: Build Docker image
      run: |
        IMAGE_NAME="${DOCKER_USERNAME:-ecommerce}/sentiment-${{ matrix.service }}"
        docker build -t "$IMAGE_NAME:latest" ./services/${{ matrix.service }}
        if [ -n "$DOCKER_USERNAME" ] && [ -n "$DOCKER_PASSWORD" ]; then
          docker push "$IMAGE_NAME:latest"
        else
          echo "Skipped pushing image to registry."
        fi

  # =============================================================================
  # Hugging Face Spaces Deployment
  # =============================================================================
  deploy-hf-spaces:
    name: Deploy to Hugging Face Spaces
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install deployment dependencies
      run: |
        pip install huggingface_hub gradio transformers torch numpy pandas faiss-cpu

    - name: Deploy to Hugging Face Spaces
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_USERNAME: ${{ secrets.HF_USERNAME }}
      run: |
        if [ -z "$HF_TOKEN" ]; then
          echo "No Hugging Face token found ‚Äî skipping deployment."
          exit 0
        fi

        echo "Deploying to Hugging Face Spaces..."
        python - <<'PY'
import os
from huggingface_hub import HfApi, create_repo

token = os.environ.get("HF_TOKEN")
username = os.environ.get("HF_USERNAME", "your-username")
repo_id = f"{username}/ecommerce-sentiment-analysis"

api = HfApi()
create_repo(
    repo_id=repo_id,
    token=token,
    repo_type="space",
    space_sdk="gradio",
    exist_ok=True
)

for file in ["hf_space_app.py", "hf_space_requirements.txt", "hf_space_README.md"]:
    if os.path.exists(file):
        api.upload_file(
            path_or_fileobj=file,
            path_in_repo=os.path.basename(file).replace("hf_space_", ""),
            repo_id=repo_id,
            repo_type="space",
            token=token
        )
        print(f"Uploaded {file}")

print(f"Successfully deployed to https://huggingface.co/spaces/{repo_id}")
PY

  # =============================================================================
  # Integration Tests
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce_sentiment
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r requirements.txt || true
        pip install -r tests/requirements.txt || true

    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        sleep 30

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ecommerce_sentiment
        RETRIEVAL_SERVICE_URL: http://localhost:8004
        INFERENCE_SERVICE_URL: http://localhost:8005
      run: |
        python -m pytest tests/test_integration.py -v

    - name: Cleanup
      if: ${{ always() }}
      run: docker-compose down -v

  # =============================================================================
  # Deployment Notification
  # =============================================================================
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-hf-spaces, integration-tests]
    if: ${{ always() && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) }}

    steps:
    - name: Deployment Success Notification
      if: ${{ needs.deploy-hf-spaces.result == 'success' }}
      run: |
        echo "Deployment successful!"
        echo "HF Spaces: https://huggingface.co/spaces/${{ secrets.HF_USERNAME || 'your-username' }}/ecommerce-sentiment-analysis"
        echo "Docker images available on Docker Hub."

    - name: Deployment Failure Notification
      if: ${{ needs.deploy-hf-spaces.result == 'failure' || needs.integration-tests.result == 'failure' }}
      run: |
        echo "Deployment failed. Please check logs for details."
        exit 1
